{"version":3,"sources":["components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","type","onClick","shortid","generate","Section","title","children","Notification","props","message","App","state","leaveFeedback","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","floor","this","Object","keys","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8OAoBeA,EAlBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,IAAKC,EAAtB,EAAsBA,MAAOC,EAA7B,EAA6BA,mBAA7B,OACf,+BACI,wCAAWJ,KACX,2CAAcC,KACd,uCAAUC,KACV,yCAAYC,KACZ,uDAA0BC,EAA1B,W,gBCaOC,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACpB,8BACKD,EAAQE,KAAI,SAACC,GAAD,OACT,yBAEAC,KAAK,SAELC,QAAS,kBAAMJ,EAAgBE,IAJ/B,cAI0CA,IADrCG,IAAQC,kBCMVC,EAdC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,qCACA,6BAAKD,IACAC,MCKMC,EARM,SAACC,GAAD,OACjB,4BAAKA,EAAMC,WCETC,E,4MASJC,MAAQ,CACNrB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPoB,cAAgB,SAACb,GACf,EAAKc,UAAS,iCACTd,EAAS,EAAKY,MAAMZ,GAAU,O,EAKrCe,mBAAqB,WACnB,MAA+B,EAAKH,MACpC,OADA,EAAQrB,KAAR,EAAcC,QAAd,EAAuBC,K,EAKzBuB,gCAAkC,WAC9B,IAAQzB,EAAS,EAAKqB,MAAdrB,KAER,OADiB0B,KAAKC,MAAQ3B,EAAO,EAAKwB,qBAAwB,M,4CAItE,WACE,MAA+BI,KAAKP,MAA5BrB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACnB,OACI,gCACE,cAAC,EAAD,CAASa,MAAM,wBAAf,SACI,cAAC,EAAD,CACET,QAASuB,OAAOC,KAAKF,KAAKP,OAC1Bd,gBAAiBqB,KAAKN,kBAE5B,cAAC,EAAD,CAASP,MAAM,aAAf,SACGa,KAAKJ,qBAAuB,EAC1B,cAAC,EAAD,CACCxB,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOyB,KAAKJ,qBACZpB,mBAAoBwB,KAAKH,oCACxB,cAAC,EAAD,CAAcN,QAAQ,+B,GAnDzBY,aAAZX,EACGY,aAAe,GAyDTZ,Q,YCxDfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f7e24bf6.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst Statistics = ({good, neutral, bad, total, positivePercentage}) => (\n    <ul>       \n        <li>Good: {good}</li>\n        <li>Neutral: {neutral}</li>\n        <li>Bad: {bad}</li>\n        <li>Total: {total}</li>\n        <li>Positive percentage: {positivePercentage}%</li>\n    </ul>    \n)\n\nStatistics.propTypes = {\n    good: PropTypes.number,\n    neutral: PropTypes.number,\n    bad: PropTypes.number,\n    total: PropTypes.number,\n    positivePercentage: PropTypes.number,\n}\n\nexport default Statistics;","import PropTypes from 'prop-types';\n// import styles from '../FeedbackOptions/FeedbackOptions.module.scss'\nimport shortid from 'shortid';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n    <div>\n        {options.map((option) => (\n            <button\n            // className={styles.button}\n            type=\"button\"\n            key={shortid.generate()}\n            onClick={() => onLeaveFeedback(option)}> {option}</button>\n        ))} \n    </div>\n)\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.array,\n    onLeaveFeedback: PropTypes.func,\n}\n\nexport default FeedbackOptions;","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => (\n    <>\n    <h1>{title}</h1>\n        {children}\n    </>\n)\n\n\nSection.propTypes = {\n    children: PropTypes.node,\n    title: PropTypes.string,\n}\n\n\nexport default Section;\n\n\n\n\n\n\n","import PropTypes from 'prop-types';\n\nconst Notification = (props) => (\n    <p>{ props.message }</p>\n)\n\nNotification.propTypes = {\n    props: PropTypes.string,\n}\n\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\nclass App extends Component {\n  static defaultProps = {\n    //\n  };\n\n  static propTypes = {\n    //\n  };\n  \n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  leaveFeedback = (option) => {\n    this.setState(() => ({        \n        [option]: this.state[option] + 1,\n      })\n    )\n  }  \n    \n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return(    \n     good + neutral + bad)\n    };   \n\n  countPositiveFeedbackPercentage = () => {\n      const { good } = this.state;\n      let percentage = Math.floor(( good / this.countTotalFeedback()) * 100);  \n      return percentage;\n  };  \n      \n  render() {\n    const { good, neutral, bad } = this.state;\n        return (\n            <div>\n              <Section title=\"Please leave feedback\">\n                  <FeedbackOptions\n                    options={Object.keys(this.state)}\n                    onLeaveFeedback={this.leaveFeedback} />\n              </Section>            \n              <Section title=\"Statistics\">              \n                {this.countTotalFeedback() > 0 ? \n                  (<Statistics\n                    good={good}\n                    neutral={neutral}\n                    bad={bad}\n                    total={this.countTotalFeedback()}\n                    positivePercentage={this.countPositiveFeedbackPercentage()} />) : \n                    (<Notification message=\"No feedback given\"/>)}\n              </Section>\n            </div>\n        ) \n  };\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'modern-normalize/modern-normalize.css';\nimport '../src/styles.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}